// Code generated by MockGen. DO NOT EDIT.
// Source: Observer.go

// Package mock_gorx is a generated GoMock package.
package gorx

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUnboundObserver is a mock of UnboundObserver interface
type MockUnboundObserver struct {
	ctrl     *gomock.Controller
	recorder *MockUnboundObserverMockRecorder
}

// MockUnboundObserverMockRecorder is the mock recorder for MockUnboundObserver
type MockUnboundObserverMockRecorder struct {
	mock *MockUnboundObserver
}

// NewMockUnboundObserver creates a new mock instance
func NewMockUnboundObserver(ctrl *gomock.Controller) *MockUnboundObserver {
	mock := &MockUnboundObserver{ctrl: ctrl}
	mock.recorder = &MockUnboundObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnboundObserver) EXPECT() *MockUnboundObserverMockRecorder {
	return m.recorder
}

// OnNext mocks base method
func (m *MockUnboundObserver) OnNext(element interface{}) {
	m.ctrl.Call(m, "OnNext", element)
}

// OnNext indicates an expected call of OnNext
func (mr *MockUnboundObserverMockRecorder) OnNext(element interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNext", reflect.TypeOf((*MockUnboundObserver)(nil).OnNext), element)
}

// OnError mocks base method
func (m *MockUnboundObserver) OnError(err error) {
	m.ctrl.Call(m, "OnError", err)
}

// OnError indicates an expected call of OnError
func (mr *MockUnboundObserverMockRecorder) OnError(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockUnboundObserver)(nil).OnError), err)
}

// OnComplete mocks base method
func (m *MockUnboundObserver) OnComplete() {
	m.ctrl.Call(m, "OnComplete")
}

// OnComplete indicates an expected call of OnComplete
func (mr *MockUnboundObserverMockRecorder) OnComplete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnComplete", reflect.TypeOf((*MockUnboundObserver)(nil).OnComplete))
}

// Bind mocks base method
func (m *MockUnboundObserver) Bind(disposable Disposable) BoundObserver {
	ret := m.ctrl.Call(m, "Bind", disposable)
	ret0, _ := ret[0].(BoundObserver)
	return ret0
}

// Bind indicates an expected call of Bind
func (mr *MockUnboundObserverMockRecorder) Bind(disposable interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockUnboundObserver)(nil).Bind), disposable)
}

// MockBoundObserver is a mock of BoundObserver interface
type MockBoundObserver struct {
	ctrl     *gomock.Controller
	recorder *MockBoundObserverMockRecorder
}

// MockBoundObserverMockRecorder is the mock recorder for MockBoundObserver
type MockBoundObserverMockRecorder struct {
	mock *MockBoundObserver
}

// NewMockBoundObserver creates a new mock instance
func NewMockBoundObserver(ctrl *gomock.Controller) *MockBoundObserver {
	mock := &MockBoundObserver{ctrl: ctrl}
	mock.recorder = &MockBoundObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoundObserver) EXPECT() *MockBoundObserverMockRecorder {
	return m.recorder
}

// OnNext mocks base method
func (m *MockBoundObserver) OnNext(element interface{}) {
	m.ctrl.Call(m, "OnNext", element)
}

// OnNext indicates an expected call of OnNext
func (mr *MockBoundObserverMockRecorder) OnNext(element interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNext", reflect.TypeOf((*MockBoundObserver)(nil).OnNext), element)
}

// OnError mocks base method
func (m *MockBoundObserver) OnError(err error) {
	m.ctrl.Call(m, "OnError", err)
}

// OnError indicates an expected call of OnError
func (mr *MockBoundObserverMockRecorder) OnError(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockBoundObserver)(nil).OnError), err)
}

// OnComplete mocks base method
func (m *MockBoundObserver) OnComplete() {
	m.ctrl.Call(m, "OnComplete")
}

// OnComplete indicates an expected call of OnComplete
func (mr *MockBoundObserverMockRecorder) OnComplete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnComplete", reflect.TypeOf((*MockBoundObserver)(nil).OnComplete))
}

// Unbind mocks base method
func (m *MockBoundObserver) Unbind() UnboundObserver {
	ret := m.ctrl.Call(m, "Unbind")
	ret0, _ := ret[0].(UnboundObserver)
	return ret0
}

// Unbind indicates an expected call of Unbind
func (mr *MockBoundObserverMockRecorder) Unbind() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockBoundObserver)(nil).Unbind))
}

// MockObserver is a mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *MockObserverMockRecorder
}

// MockObserverMockRecorder is the mock recorder for MockObserver
type MockObserverMockRecorder struct {
	mock *MockObserver
}

// NewMockObserver creates a new mock instance
func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &MockObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObserver) EXPECT() *MockObserverMockRecorder {
	return m.recorder
}

// OnNext mocks base method
func (m *MockObserver) OnNext(element interface{}) {
	m.ctrl.Call(m, "OnNext", element)
}

// OnNext indicates an expected call of OnNext
func (mr *MockObserverMockRecorder) OnNext(element interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNext", reflect.TypeOf((*MockObserver)(nil).OnNext), element)
}

// OnError mocks base method
func (m *MockObserver) OnError(err error) {
	m.ctrl.Call(m, "OnError", err)
}

// OnError indicates an expected call of OnError
func (mr *MockObserverMockRecorder) OnError(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockObserver)(nil).OnError), err)
}

// OnComplete mocks base method
func (m *MockObserver) OnComplete() {
	m.ctrl.Call(m, "OnComplete")
}

// OnComplete indicates an expected call of OnComplete
func (mr *MockObserverMockRecorder) OnComplete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnComplete", reflect.TypeOf((*MockObserver)(nil).OnComplete))
}
